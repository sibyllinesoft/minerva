Metadata-Version: 2.4
Name: meta-mcp
Version: 0.1.0
Summary: A local-first Meta MCP server for aggregating and orchestrating multiple MCP servers
Author-email: Meta MCP Team <team@example.com>
License: MIT
Project-URL: Homepage, https://github.com/example/meta-mcp
Project-URL: Repository, https://github.com/example/meta-mcp
Project-URL: Documentation, https://meta-mcp.readthedocs.io
Project-URL: Issues, https://github.com/example/meta-mcp/issues
Keywords: mcp,model-context-protocol,ai,llm,tool-orchestration
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.11
Description-Content-Type: text/markdown
Requires-Dist: fastapi>=0.104.0
Requires-Dist: uvicorn[standard]>=0.24.0
Requires-Dist: httpx>=0.25.0
Requires-Dist: uvloop>=0.19.0
Requires-Dist: pydantic>=2.5.0
Requires-Dist: orjson>=3.9.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: asyncpg>=0.29.0
Requires-Dist: alembic>=1.13.0
Requires-Dist: pgvector>=0.2.4
Requires-Dist: tantivy>=0.21.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: onnxruntime>=1.16.0
Requires-Dist: opentelemetry-sdk>=1.21.0
Requires-Dist: opentelemetry-instrumentation-fastapi>=0.42b0
Requires-Dist: opentelemetry-instrumentation-httpx>=0.42b0
Requires-Dist: opentelemetry-instrumentation-sqlalchemy>=0.42b0
Requires-Dist: opentelemetry-exporter-prometheus>=0.57b0
Requires-Dist: keyring>=24.0.0
Requires-Dist: cryptography>=41.0.0
Requires-Dist: pyyaml>=6.0.0
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: click>=8.1.0
Requires-Dist: rich>=13.0.0
Requires-Dist: structlog>=23.2.0
Provides-Extra: dev
Requires-Dist: pytest>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock>=3.12.0; extra == "dev"
Requires-Dist: httpx-oauth>=0.12.0; extra == "dev"
Requires-Dist: ruff>=0.1.0; extra == "dev"
Requires-Dist: mypy>=1.7.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: mkdocs>=1.5.0; extra == "dev"
Requires-Dist: mkdocs-material>=9.4.0; extra == "dev"
Requires-Dist: pre-commit>=3.5.0; extra == "dev"
Requires-Dist: pip-tools>=7.3.0; extra == "dev"
Provides-Extra: gpu
Requires-Dist: onnxruntime-gpu>=1.16.0; extra == "gpu"
Provides-Extra: cloud
Requires-Dist: boto3>=1.34.0; extra == "cloud"
Requires-Dist: azure-storage-blob>=12.19.0; extra == "cloud"
Requires-Dist: google-cloud-storage>=2.10.0; extra == "cloud"

# Meta MCP

A local-first Meta MCP (Model Context Protocol) server that discovers, aggregates, and intelligently orchestrates multiple upstream MCP servers.

## Overview

Meta MCP is a sophisticated monolith that provides:

- **Discovery & Aggregation**: Automatically discover and normalize tools from multiple upstream MCP servers
- **Intelligent Selection**: Hybrid search using BM25 (Tantivy) + dense embeddings (ONNX) with cross-encoder reranking
- **Optional Planning**: LLM-powered DAG generation for complex multi-tool workflows
- **Secure Execution**: Proxy tool calls with RBAC/ACL controls and observability
- **Admin Interface**: Web UI for managing origins, policies, and monitoring
- **Production Ready**: Full observability with OpenTelemetry, circuit breakers, and degradation modes

## Quick Start

### Prerequisites

- Python 3.11+
- Docker and Docker Compose
- PostgreSQL 14+ with pgvector extension

### Development Setup

1. **Clone and setup**:
   ```bash
   git clone <repository-url>
   cd meta-mcp
   pip install -e ".[dev]"
   ```

2. **Start PostgreSQL**:
   ```bash
   docker-compose up postgres -d
   ```

3. **Run the server**:
   ```bash
   python -m app.main
   # Or with uvicorn directly:
   uvicorn app.main:app --reload
   ```

4. **Access the application**:
   - API: http://localhost:8000
   - Health: http://localhost:8000/healthz  
   - Docs: http://localhost:8000/docs
   - Admin UI: http://localhost:8000/admin (coming in Phase 9)

### Full Stack with Docker

```bash
# Start everything (PostgreSQL + Meta MCP + Redis)
docker-compose --profile full up -d

# Check health
curl http://localhost:8000/healthz
```

## Architecture

### Core Components

- **Ingestion Engine**: Crawls upstream MCP servers, validates schemas, stores capability cards
- **Search System**: Hybrid BM25 + vector search with cross-encoder reranking
- **Model Runtime**: Pluggable ONNX/API models for embeddings, reranking, and planning
- **Proxy Layer**: Secure tool execution with observability and circuit breakers
- **Policy Engine**: RBAC/ACL with audit trails
- **Admin Interface**: Management UI and debugging tools

### Selection Modes

- **Fast** (200ms): 24 BM25 + 16 dense candidates ‚Üí 16 rerank ‚Üí 5 tools
- **Balanced** (500ms): 48 BM25 + 32 dense candidates ‚Üí 32 rerank ‚Üí 8 tools  
- **Thorough** (2s): 96 BM25 + 64 dense candidates ‚Üí 64 rerank ‚Üí 10 tools + planning

## Configuration

Configuration is managed through YAML files with environment variable substitution:

```yaml
# config/development.yaml
server:
  host: "0.0.0.0"
  port: 8000

database:
  url: "postgresql+asyncpg://metamcp:metamcp_dev@localhost:5432/metamcp"

selection_modes:
  fast:
    bm25_candidates: 24
    dense_candidates: 16
    expose_tools: 5
```

Environment variables can be substituted using `${VAR_NAME}` or `${VAR_NAME:-default}` syntax.

## Development

### Project Structure

```
‚îú‚îÄ‚îÄ app/                    # Main application code
‚îÇ   ‚îú‚îÄ‚îÄ core/              # Core configuration and utilities
‚îÇ   ‚îú‚îÄ‚îÄ models/            # Database models and schemas  
‚îÇ   ‚îú‚îÄ‚îÄ api/               # FastAPI routes and endpoints
‚îÇ   ‚îú‚îÄ‚îÄ services/          # Business logic services
‚îÇ   ‚îî‚îÄ‚îÄ utils/             # Utility functions
‚îú‚îÄ‚îÄ admin_ui/              # Admin web interface
‚îú‚îÄ‚îÄ migrations/            # Database migrations (Alembic)
‚îú‚îÄ‚îÄ config/                # Configuration files
‚îú‚îÄ‚îÄ scripts/               # Setup and utility scripts
‚îú‚îÄ‚îÄ tests/                 # Test suites
‚îî‚îÄ‚îÄ docs/                  # Documentation
```

### Development Commands

```bash
# Install dependencies
pip install -e ".[dev]"

# Run tests
pytest

# Format code
black app/ tests/
ruff check app/ tests/

# Type checking
mypy app/

# Run database migrations
alembic upgrade head

# Start development server
uvicorn app.main:app --reload
```

## Implementation Status

This project is implemented in phases:

- ‚úÖ **Phase 0**: Repository bootstrap & foundations
- üöß **Phase 1**: Schema, migrations, and indexing (In Progress)
- ‚è≥ **Phase 2**: Model runtime (ONNX embeddings, reranker, planner)
- ‚è≥ **Phase 3**: Ingestion (discovery, validation, snapshots)
- ‚è≥ **Phase 4**: Selection (hybrid search, rerank, MMR, policy)
- ‚è≥ **Phase 5**: Planner (optional DAG generation)
- ‚è≥ **Phase 6**: Proxy/executor (safe calls, observability)
- ‚è≥ **Phase 7**: RBAC/ACL policy engine
- ‚è≥ **Phase 8**: Secrets management
- ‚è≥ **Phase 9**: Admin UI
- ‚è≥ **Phase 10**: Observability & reliability
- ‚è≥ **Phase 11**: Evaluation scaffold
- ‚è≥ **Phase 12**: Packaging & distribution
- ‚è≥ **Phase 13**: Cloud-ready upgrades
- ‚è≥ **Phase 14**: Milestones & acceptance gates
- ‚è≥ **Phase 15**: Runbooks & rollbacks

## License

MIT License - see LICENSE file for details.
