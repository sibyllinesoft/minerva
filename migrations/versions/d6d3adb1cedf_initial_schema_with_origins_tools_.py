"""Initial schema with origins, tools, policies, sessions, and secrets

Revision ID: d6d3adb1cedf
Revises: 
Create Date: 2025-08-25 14:16:36.882564

"""
from alembic import op
import sqlalchemy as sa
import pgvector
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'd6d3adb1cedf'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('origins',
    sa.Column('url', sa.String(length=2048), nullable=False, comment='Base URL of the upstream MCP server'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable name for the origin'),
    sa.Column('auth_type', postgresql.ENUM('NONE', 'BASIC', 'BEARER', 'API_KEY', 'OAUTH2', 'MTLS', name='auth_type_enum'), nullable=False, comment='Authentication method required'),
    sa.Column('tls_verify', sa.Boolean(), nullable=False, comment='Whether to verify TLS certificates'),
    sa.Column('tls_pinning', sa.Text(), nullable=True, comment='Optional TLS certificate pinning configuration'),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', 'ERROR', 'DEPRECATED', name='origin_status_enum'), nullable=False, comment='Current status of the origin'),
    sa.Column('last_crawled_at', sa.DateTime(), nullable=True, comment='Last successful crawl timestamp'),
    sa.Column('last_error', sa.Text(), nullable=True, comment='Last error message if status is ERROR'),
    sa.Column('meta', sa.JSON(), nullable=False, comment='Additional metadata and configuration'),
    sa.Column('tool_count', sa.Integer(), nullable=False, comment='Number of tools from this origin'),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True, comment='Average response time in milliseconds'),
    sa.Column('success_rate', sa.Float(), nullable=True, comment='Success rate as a percentage (0.0-100.0)'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url'),
    sa.UniqueConstraint('url', name='uq_origins_url')
    )
    op.create_index('ix_origins_auth_type', 'origins', ['auth_type'], unique=False)
    op.create_index('ix_origins_last_crawled_at', 'origins', ['last_crawled_at'], unique=False)
    op.create_index('ix_origins_status', 'origins', ['status'], unique=False)
    op.create_index('ix_origins_url', 'origins', ['url'], unique=False)
    op.create_table('policies',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Human-readable policy name'),
    sa.Column('description', sa.String(length=1000), nullable=True, comment='Policy description and purpose'),
    sa.Column('organization', sa.String(length=255), nullable=False, comment='Organization this policy applies to'),
    sa.Column('role', sa.String(length=100), nullable=False, comment='Role this policy applies to (admin, user, etc.)'),
    sa.Column('allow_origins', sa.ARRAY(sa.String(length=255)), nullable=False, comment='List of allowed origin URLs or patterns'),
    sa.Column('deny_origins', sa.ARRAY(sa.String(length=255)), nullable=False, comment='List of denied origin URLs or patterns'),
    sa.Column('allow_tools', sa.ARRAY(sa.String(length=255)), nullable=False, comment='List of allowed tool names or patterns'),
    sa.Column('deny_tools', sa.ARRAY(sa.String(length=255)), nullable=False, comment='List of denied tool names or patterns'),
    sa.Column('allow_categories', sa.ARRAY(sa.String(length=100)), nullable=False, comment='List of allowed tool categories'),
    sa.Column('deny_categories', sa.ARRAY(sa.String(length=100)), nullable=False, comment='List of denied tool categories'),
    sa.Column('default_allow', sa.Boolean(), nullable=False, comment='Default behavior when no explicit rules match'),
    sa.Column('enabled', sa.Boolean(), nullable=False, comment='Whether this policy is active'),
    sa.Column('priority', sa.Integer(), nullable=False, comment='Policy priority (lower numbers = higher priority)'),
    sa.Column('meta', sa.JSON(), nullable=False, comment='Additional policy configuration'),
    sa.Column('version', sa.Integer(), nullable=False, comment='Policy version for atomic updates'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='User who created this policy'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='User who last updated this policy'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization', 'role', 'name', name='uq_policies_org_role_name')
    )
    op.create_index('ix_policies_allow_categories', 'policies', ['allow_categories'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_allow_origins', 'policies', ['allow_origins'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_allow_tools', 'policies', ['allow_tools'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_deny_categories', 'policies', ['deny_categories'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_deny_origins', 'policies', ['deny_origins'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_deny_tools', 'policies', ['deny_tools'], unique=False, postgresql_using='gin')
    op.create_index('ix_policies_enabled', 'policies', ['enabled'], unique=False)
    op.create_index('ix_policies_org', 'policies', ['organization'], unique=False)
    op.create_index('ix_policies_org_role', 'policies', ['organization', 'role'], unique=False)
    op.create_index('ix_policies_org_role_enabled', 'policies', ['organization', 'role', 'enabled'], unique=False)
    op.create_index('ix_policies_priority', 'policies', ['priority'], unique=False)
    op.create_index('ix_policies_priority_enabled', 'policies', ['priority', 'enabled'], unique=False)
    op.create_index('ix_policies_role', 'policies', ['role'], unique=False)
    op.create_index('ix_policies_version', 'policies', ['version'], unique=False)
    op.create_table('secrets',
    sa.Column('name', sa.String(length=255), nullable=False, comment='Unique name/key for the secret'),
    sa.Column('description', sa.String(length=500), nullable=True, comment='Human-readable description'),
    sa.Column('secret_type', postgresql.ENUM('API_KEY', 'BEARER_TOKEN', 'BASIC_AUTH', 'OAUTH2_TOKEN', 'TLS_CERT', 'PRIVATE_KEY', 'GENERIC', name='secret_type_enum'), nullable=False, comment='Type of secret stored'),
    sa.Column('encrypted_value', sa.Text(), nullable=False, comment='Encrypted secret value (base64 encoded)'),
    sa.Column('encryption_key_id', sa.String(length=255), nullable=False, comment='ID of the encryption key used'),
    sa.Column('encryption_algorithm', sa.String(length=50), nullable=False, comment='Encryption algorithm used'),
    sa.Column('initialization_vector', sa.String(length=255), nullable=False, comment='Initialization vector (base64 encoded)'),
    sa.Column('authentication_tag', sa.String(length=255), nullable=False, comment='Authentication tag for integrity (base64 encoded)'),
    sa.Column('owner', sa.String(length=255), nullable=True, comment='Owner of this secret'),
    sa.Column('expires_at', sa.DateTime(), nullable=True, comment='When this secret expires'),
    sa.Column('last_used_at', sa.DateTime(), nullable=True, comment='Last time this secret was accessed'),
    sa.Column('rotation_required', sa.Boolean(), nullable=False, comment='Whether this secret needs rotation'),
    sa.Column('created_by', sa.String(length=255), nullable=True, comment='User who created this secret'),
    sa.Column('updated_by', sa.String(length=255), nullable=True, comment='User who last updated this secret'),
    sa.Column('access_count', sa.Integer(), nullable=False, comment='Number of times this secret has been accessed'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('name', name='uq_secrets_name')
    )
    op.create_index('ix_secrets_access_count', 'secrets', ['access_count'], unique=False)
    op.create_index('ix_secrets_created_by', 'secrets', ['created_by'], unique=False)
    op.create_index('ix_secrets_encryption_key_id', 'secrets', ['encryption_key_id'], unique=False)
    op.create_index('ix_secrets_expires_at', 'secrets', ['expires_at'], unique=False)
    op.create_index('ix_secrets_last_used_at', 'secrets', ['last_used_at'], unique=False)
    op.create_index('ix_secrets_name', 'secrets', ['name'], unique=False)
    op.create_index('ix_secrets_owner', 'secrets', ['owner'], unique=False)
    op.create_index('ix_secrets_rotation_required', 'secrets', ['rotation_required'], unique=False)
    op.create_index('ix_secrets_type', 'secrets', ['secret_type'], unique=False)
    op.create_table('sessions',
    sa.Column('client_id', sa.String(length=255), nullable=True, comment='Client identifier if available'),
    sa.Column('user_id', sa.String(length=255), nullable=True, comment='User identifier if available'),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'COMPLETED', 'ERROR', 'TIMEOUT', name='session_status_enum'), nullable=False, comment='Current session status'),
    sa.Column('selection_mode', sa.String(length=50), nullable=True, comment='Selection mode used (fast/balanced/thorough)'),
    sa.Column('context', sa.JSON(), nullable=False, comment='Session context and conversation state'),
    sa.Column('tool_calls', sa.Integer(), nullable=False, comment='Number of tool calls in this session'),
    sa.Column('successful_calls', sa.Integer(), nullable=False, comment='Number of successful tool calls'),
    sa.Column('total_latency_ms', sa.Float(), nullable=False, comment='Total latency across all calls'),
    sa.Column('started_at', sa.DateTime(), server_default='now()', nullable=False, comment='Session start time'),
    sa.Column('last_activity_at', sa.DateTime(), server_default='now()', nullable=False, comment='Last activity timestamp'),
    sa.Column('ended_at', sa.DateTime(), nullable=True, comment='Session end time'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_sessions_active_recent', 'sessions', ['status', 'last_activity_at'], unique=False)
    op.create_index('ix_sessions_client_id', 'sessions', ['client_id'], unique=False)
    op.create_index('ix_sessions_client_status', 'sessions', ['client_id', 'status'], unique=False)
    op.create_index('ix_sessions_last_activity', 'sessions', ['last_activity_at'], unique=False)
    op.create_index('ix_sessions_selection_mode', 'sessions', ['selection_mode'], unique=False)
    op.create_index('ix_sessions_started_at', 'sessions', ['started_at'], unique=False)
    op.create_index('ix_sessions_status', 'sessions', ['status'], unique=False)
    op.create_index('ix_sessions_user_id', 'sessions', ['user_id'], unique=False)
    op.create_index('ix_sessions_user_status', 'sessions', ['user_id', 'status'], unique=False)
    op.create_table('tools',
    sa.Column('origin_id', sa.UUID(), nullable=False, comment='Origin server that provides this tool'),
    sa.Column('name', sa.String(length=255), nullable=False, comment='Tool name (unique within origin)'),
    sa.Column('version', sa.String(length=50), nullable=False, comment='Tool version'),
    sa.Column('brief', sa.String(length=500), nullable=False, comment='Brief description for search and selection'),
    sa.Column('description', sa.Text(), nullable=False, comment='Detailed description and usage'),
    sa.Column('args_schema', sa.JSON(), nullable=False, comment='JSON Schema for tool arguments'),
    sa.Column('returns_schema', sa.JSON(), nullable=False, comment='JSON Schema for tool return values'),
    sa.Column('categories', sa.ARRAY(sa.String(length=100)), nullable=False, comment='Tool categories for filtering and organization'),
    sa.Column('examples', sa.JSON(), nullable=False, comment='Usage examples and test cases'),
    sa.Column('last_seen_at', sa.DateTime(), server_default='now()', nullable=False, comment='Last time this tool was seen during crawling'),
    sa.Column('deprecated', sa.Boolean(), nullable=False, comment='Whether this tool is deprecated'),
    sa.Column('deprecated_reason', sa.Text(), nullable=True, comment='Reason for deprecation if applicable'),
    sa.Column('is_side_effect_free', sa.Boolean(), nullable=False, comment='Whether tool has side effects (safe for probing)'),
    sa.Column('reliability_score', sa.Float(), nullable=True, comment='Computed reliability score (0.0-1.0)'),
    sa.Column('search_embedding_version', sa.String(length=50), nullable=True, comment='Version of embedding model used'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['origin_id'], ['origins.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('origin_id', 'name', name='uq_tools_origin_name')
    )
    op.create_index('ix_tools_categories', 'tools', ['categories'], unique=False, postgresql_using='gin')
    op.create_index('ix_tools_deprecated', 'tools', ['deprecated'], unique=False)
    op.create_index('ix_tools_last_seen_at', 'tools', ['last_seen_at'], unique=False)
    op.create_index('ix_tools_name', 'tools', ['name'], unique=False)
    op.create_index('ix_tools_origin_deprecated', 'tools', ['origin_id', 'deprecated'], unique=False)
    op.create_index('ix_tools_origin_last_seen', 'tools', ['origin_id', 'last_seen_at'], unique=False)
    op.create_index('ix_tools_reliability_score', 'tools', ['reliability_score'], unique=False)
    # Skip trigram search index for now - will be added after pg_trgm extension
    # op.create_index('ix_tools_search_content', 'tools', ['brief', 'description'], unique=False, postgresql_using='gin', postgresql_ops={'brief': 'gin_trgm_ops', 'description': 'gin_trgm_ops'})
    op.create_table('tool_embeddings',
    sa.Column('tool_id', sa.UUID(), nullable=False, comment='Tool this embedding represents'),
    sa.Column('model', sa.String(length=100), nullable=False, comment='Embedding model identifier'),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=False, comment='Dense vector embedding'),
    sa.Column('updated_at', sa.DateTime(), server_default='now()', nullable=False, comment='When this embedding was last updated'),
    sa.Column('embedding_version', sa.String(length=50), nullable=False, comment='Version of the content used to generate embedding'),
    sa.ForeignKeyConstraint(['tool_id'], ['tools.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('tool_id', 'model')
    )
    op.create_index('ix_tool_embeddings_model', 'tool_embeddings', ['model'], unique=False)
    op.create_index('ix_tool_embeddings_updated_at', 'tool_embeddings', ['updated_at'], unique=False)
    op.create_index('ix_tool_embeddings_vector_l2', 'tool_embeddings', ['embedding'], unique=False, postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 200}, postgresql_ops={'embedding': 'vector_l2_ops'})
    op.create_table('tool_stats',
    sa.Column('tool_id', sa.UUID(), nullable=False, comment='Tool these stats represent'),
    sa.Column('window_start', sa.DateTime(), nullable=False, comment='Start of the statistics window'),
    sa.Column('window_len', sa.Integer(), nullable=False, comment='Length of window in minutes'),
    sa.Column('p50_ms', sa.Float(), nullable=True, comment='50th percentile response time in milliseconds'),
    sa.Column('p95_ms', sa.Float(), nullable=True, comment='95th percentile response time in milliseconds'),
    sa.Column('p99_ms', sa.Float(), nullable=True, comment='99th percentile response time in milliseconds'),
    sa.Column('success_rate', sa.Float(), nullable=True, comment='Success rate as percentage (0.0-100.0)'),
    sa.Column('call_count', sa.Integer(), nullable=False, comment='Total number of calls in this window'),
    sa.Column('error_count', sa.Integer(), nullable=False, comment='Number of errors in this window'),
    sa.Column('error_taxonomy', sa.JSON(), nullable=False, comment='Breakdown of error types and frequencies'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['tool_id'], ['tools.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_tool_stats_p95_ms', 'tool_stats', ['p95_ms'], unique=False)
    op.create_index('ix_tool_stats_success_rate', 'tool_stats', ['success_rate'], unique=False)
    op.create_index('ix_tool_stats_tool_recent', 'tool_stats', ['tool_id', 'window_start'], unique=False)
    op.create_index('ix_tool_stats_tool_window', 'tool_stats', ['tool_id', 'window_start'], unique=False)
    op.create_index('ix_tool_stats_window_start', 'tool_stats', ['window_start'], unique=False)
    op.create_table('traces',
    sa.Column('session_id', sa.UUID(), nullable=False, comment='Session this trace belongs to'),
    sa.Column('span_type', postgresql.ENUM('SELECTION', 'PLANNING', 'PROXY_CALL', 'AUTHENTICATION', 'VALIDATION', 'POLICY_CHECK', name='trace_span_type_enum'), nullable=False, comment='Type of operation being traced'),
    sa.Column('operation_name', sa.String(length=255), nullable=False, comment='Name of the operation'),
    sa.Column('parent_span_id', sa.UUID(), nullable=True, comment='Parent span for nested operations'),
    sa.Column('started_at', sa.DateTime(), server_default='now()', nullable=False, comment='Operation start time'),
    sa.Column('ended_at', sa.DateTime(), nullable=True, comment='Operation end time'),
    sa.Column('duration_ms', sa.Float(), nullable=True, comment='Operation duration in milliseconds'),
    sa.Column('success', sa.Boolean(), nullable=True, comment='Whether the operation succeeded'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if operation failed'),
    sa.Column('input_data', sa.JSON(), nullable=False, comment='Input parameters for the operation'),
    sa.Column('output_data', sa.JSON(), nullable=False, comment='Output results from the operation'),
    sa.Column('trace_metadata', sa.JSON(), nullable=False, comment='Additional metadata and tags'),
    sa.Column('tool_id', sa.UUID(), nullable=True, comment='Tool ID if this trace involves a specific tool'),
    sa.Column('origin_id', sa.UUID(), nullable=True, comment='Origin ID if this trace involves a specific origin'),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['origin_id'], ['origins.id'], ),
    sa.ForeignKeyConstraint(['parent_span_id'], ['traces.id'], ),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tool_id'], ['tools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('ix_traces_duration_ms', 'traces', ['duration_ms'], unique=False)
    op.create_index('ix_traces_origin_id', 'traces', ['origin_id'], unique=False)
    op.create_index('ix_traces_origin_performance', 'traces', ['origin_id', 'success', 'duration_ms'], unique=False)
    op.create_index('ix_traces_parent_span_id', 'traces', ['parent_span_id'], unique=False)
    op.create_index('ix_traces_session_id', 'traces', ['session_id'], unique=False)
    op.create_index('ix_traces_session_started', 'traces', ['session_id', 'started_at'], unique=False)
    op.create_index('ix_traces_session_type', 'traces', ['session_id', 'span_type'], unique=False)
    op.create_index('ix_traces_span_type', 'traces', ['span_type'], unique=False)
    op.create_index('ix_traces_started_at', 'traces', ['started_at'], unique=False)
    op.create_index('ix_traces_success', 'traces', ['success'], unique=False)
    op.create_index('ix_traces_success_duration', 'traces', ['success', 'duration_ms'], unique=False)
    op.create_index('ix_traces_tool_id', 'traces', ['tool_id'], unique=False)
    op.create_index('ix_traces_tool_performance', 'traces', ['tool_id', 'success', 'duration_ms'], unique=False)
    op.create_index('ix_traces_type_started', 'traces', ['span_type', 'started_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_traces_type_started', table_name='traces')
    op.drop_index('ix_traces_tool_performance', table_name='traces')
    op.drop_index('ix_traces_tool_id', table_name='traces')
    op.drop_index('ix_traces_success_duration', table_name='traces')
    op.drop_index('ix_traces_success', table_name='traces')
    op.drop_index('ix_traces_started_at', table_name='traces')
    op.drop_index('ix_traces_span_type', table_name='traces')
    op.drop_index('ix_traces_session_type', table_name='traces')
    op.drop_index('ix_traces_session_started', table_name='traces')
    op.drop_index('ix_traces_session_id', table_name='traces')
    op.drop_index('ix_traces_parent_span_id', table_name='traces')
    op.drop_index('ix_traces_origin_performance', table_name='traces')
    op.drop_index('ix_traces_origin_id', table_name='traces')
    op.drop_index('ix_traces_duration_ms', table_name='traces')
    op.drop_table('traces')
    op.drop_index('ix_tool_stats_window_start', table_name='tool_stats')
    op.drop_index('ix_tool_stats_tool_window', table_name='tool_stats')
    op.drop_index('ix_tool_stats_tool_recent', table_name='tool_stats')
    op.drop_index('ix_tool_stats_success_rate', table_name='tool_stats')
    op.drop_index('ix_tool_stats_p95_ms', table_name='tool_stats')
    op.drop_table('tool_stats')
    op.drop_index('ix_tool_embeddings_vector_l2', table_name='tool_embeddings', postgresql_using='hnsw', postgresql_with={'m': 16, 'ef_construction': 200}, postgresql_ops={'embedding': 'vector_l2_ops'})
    op.drop_index('ix_tool_embeddings_updated_at', table_name='tool_embeddings')
    op.drop_index('ix_tool_embeddings_model', table_name='tool_embeddings')
    op.drop_table('tool_embeddings')
    # Skip trigram search index for now
    # op.drop_index('ix_tools_search_content', table_name='tools', postgresql_using='gin', postgresql_ops={'brief': 'gin_trgm_ops', 'description': 'gin_trgm_ops'})
    op.drop_index('ix_tools_reliability_score', table_name='tools')
    op.drop_index('ix_tools_origin_last_seen', table_name='tools')
    op.drop_index('ix_tools_origin_deprecated', table_name='tools')
    op.drop_index('ix_tools_name', table_name='tools')
    op.drop_index('ix_tools_last_seen_at', table_name='tools')
    op.drop_index('ix_tools_deprecated', table_name='tools')
    op.drop_index('ix_tools_categories', table_name='tools', postgresql_using='gin')
    op.drop_table('tools')
    op.drop_index('ix_sessions_user_status', table_name='sessions')
    op.drop_index('ix_sessions_user_id', table_name='sessions')
    op.drop_index('ix_sessions_status', table_name='sessions')
    op.drop_index('ix_sessions_started_at', table_name='sessions')
    op.drop_index('ix_sessions_selection_mode', table_name='sessions')
    op.drop_index('ix_sessions_last_activity', table_name='sessions')
    op.drop_index('ix_sessions_client_status', table_name='sessions')
    op.drop_index('ix_sessions_client_id', table_name='sessions')
    op.drop_index('ix_sessions_active_recent', table_name='sessions')
    op.drop_table('sessions')
    op.drop_index('ix_secrets_type', table_name='secrets')
    op.drop_index('ix_secrets_rotation_required', table_name='secrets')
    op.drop_index('ix_secrets_owner', table_name='secrets')
    op.drop_index('ix_secrets_name', table_name='secrets')
    op.drop_index('ix_secrets_last_used_at', table_name='secrets')
    op.drop_index('ix_secrets_expires_at', table_name='secrets')
    op.drop_index('ix_secrets_encryption_key_id', table_name='secrets')
    op.drop_index('ix_secrets_created_by', table_name='secrets')
    op.drop_index('ix_secrets_access_count', table_name='secrets')
    op.drop_table('secrets')
    op.drop_index('ix_policies_version', table_name='policies')
    op.drop_index('ix_policies_role', table_name='policies')
    op.drop_index('ix_policies_priority_enabled', table_name='policies')
    op.drop_index('ix_policies_priority', table_name='policies')
    op.drop_index('ix_policies_org_role_enabled', table_name='policies')
    op.drop_index('ix_policies_org_role', table_name='policies')
    op.drop_index('ix_policies_org', table_name='policies')
    op.drop_index('ix_policies_enabled', table_name='policies')
    op.drop_index('ix_policies_deny_tools', table_name='policies', postgresql_using='gin')
    op.drop_index('ix_policies_deny_origins', table_name='policies', postgresql_using='gin')
    op.drop_index('ix_policies_deny_categories', table_name='policies', postgresql_using='gin')
    op.drop_index('ix_policies_allow_tools', table_name='policies', postgresql_using='gin')
    op.drop_index('ix_policies_allow_origins', table_name='policies', postgresql_using='gin')
    op.drop_index('ix_policies_allow_categories', table_name='policies', postgresql_using='gin')
    op.drop_table('policies')
    op.drop_index('ix_origins_url', table_name='origins')
    op.drop_index('ix_origins_status', table_name='origins')
    op.drop_index('ix_origins_last_crawled_at', table_name='origins')
    op.drop_index('ix_origins_auth_type', table_name='origins')
    op.drop_table('origins')
    # ### end Alembic commands ###