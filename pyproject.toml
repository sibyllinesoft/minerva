[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "minerva"
version = "0.1.0"
description = "An intelligent MCP orchestration system for aggregating and orchestrating multiple MCP servers"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Minerva Team", email = "team@example.com"}
]
keywords = ["mcp", "model-context-protocol", "ai", "llm", "tool-orchestration", "minerva"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies
dependencies = [
    # Web framework and async
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "httpx>=0.25.0",
    "uvloop>=0.19.0",
    
    # Data and serialization
    "pydantic>=2.5.0",
    "orjson>=3.9.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "asyncpg>=0.29.0",
    "alembic>=1.13.0",
    
    # Vector and search
    "pgvector>=0.2.4",
    "tantivy>=0.21.0",  # Rust bindings for BM25
    
    # ML and embeddings
    "numpy>=1.24.0",
    "onnxruntime>=1.16.0",
    
    # Observability
    "opentelemetry-sdk>=1.21.0",
    "opentelemetry-instrumentation-fastapi>=0.42b0",
    "opentelemetry-instrumentation-httpx>=0.42b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.42b0",
    "opentelemetry-exporter-prometheus>=0.57b0",
    
    # Security and secrets
    "keyring>=24.0.0",
    "cryptography>=41.0.0",
    
    # Configuration
    "pyyaml>=6.0.0",
    "pydantic-settings>=2.1.0",
    
    # Utilities
    "click>=8.1.0",
    "rich>=13.0.0",
    "structlog>=23.2.0",
]

# Optional dependencies
[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx-oauth>=0.12.0",
    
    # Linting and formatting
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    
    # Development tools
    "pre-commit>=3.5.0",
    "pip-tools>=7.3.0",
]

gpu = [
    "onnxruntime-gpu>=1.16.0",
]

cloud = [
    "boto3>=1.34.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
]

[project.urls]
Homepage = "https://github.com/example/minerva"
Repository = "https://github.com/example/minerva"
Documentation = "https://minerva.readthedocs.io"
Issues = "https://github.com/example/minerva/issues"

[project.scripts]
minerva = "app.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "migrations*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["E501"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]